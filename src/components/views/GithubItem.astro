---
import type { ExtendedPrData, ExtendedReleaseData } from './GithubView.astro'
import Link from '~/components/base/Link.astro'

import { formatDate } from '~/utils/datetime'

type Props =
  | {
      collectionType: 'releases'
      idx: number
      item: ExtendedReleaseData
      isDiffMonth: boolean
    }
    | {
      collectionType: 'prs'
      idx: number
      item: ExtendedPrData
      isDiffMonth: boolean
    }

const { collectionType, idx, item, isDiffMonth } = Astro.props

const isOrg = collectionType === 'releases' ? item.repoIsInOrganization : item.repository.isInOrganization

const mainLogoSrc = item.mainLogo
const mainLogoAlt = collectionType === 'releases' ? item.repoNameWithOwner : item.repository.nameWithOwner
const subLogoSrc = item.subLogo

const firstLinkHref = item.url
const firstLinkText = collectionType === 'releases' ? item.pkgName : item.title

const secondLinkHref = collectionType === 'releases' ? item.repoUrl : item.repository.url
const secondLinkText = collectionType === 'releases' ? item.repoNameWithOwner : item.repository.nameWithOwner

const time = collectionType === 'releases' ? item.publishedAt : item.createdAt
const content = collectionType === 'releases' ? item.descriptionHTML : item.bodyHTML
---

<details class={`slide-enter flex flex-col ${isDiffMonth ? 'mt-12 lt-sm:mt-10' : ''}`} style={{ '--enter-stage': idx }}>
  {/* Logo */}
  <summary class="flex cursor-pointer items-center gap-4 lt-sm:gap-2">
    <div class="relative flex-none">
      <img
        class={`mt-0.2 size-11 border border-gray-1 lt-sm:size-10 dark:border-gray-8 ${isOrg ? 'rounded-lg' : 'rounded-full transform-scale-108'}`}
        src={mainLogoSrc}
        alt={mainLogoAlt}
      />
      {
        subLogoSrc && (
          <div
            class="absolute bottom--2 right--1.6 size-6 flex items-center justify-center border border-gray:5 rounded-full bg-white p-0.72 dark:bg-[#121212]"
          >
            {subLogoSrc.includes('://') ? <img src={subLogoSrc} alt="Sub logo" /> : <span class={subLogoSrc} />}
          </div>
        )
      }
    </div>

    {/* Text */}
    <div class="min-w-0 flex flex-1 items-center justify-between gap-2">
      <div class="min-w-0 flex flex-col gap-0.5">
        <Link
          class="flex items-center gap-1.5 text-4.4 lt-sm:text-3.9 hover:underline op-100!"
          href={firstLinkHref}
          external={true}
        >
          {
            collectionType === 'prs' &&
            (item.state === 'MERGED'
? (
                <span u-i-bx-git-merge class="size-4.5 shrink-0 text-purple-500 lt-sm:size-4 dark:text-purple-400" />
              )
: (
                <span
                  u-i-bx-git-pull-request
                  class="size-4.5 shrink-0 text-green-500 lt-sm:size-4 dark:text-green-400"
                />
              ))
          }
          <span class="truncate">{firstLinkText}</span>
        </Link>
        <div class="flex items-center text-sm op-transition lt-sm:text-3.2">
          <Link class="truncate" href={secondLinkHref} external={true}>
            {secondLinkText}
          </Link>
        </div>
      </div>
      <div class="flex shrink-0 flex-col items-end gap-0.6">
        <Link class="text-4.2 font-mono lt-sm:text-3.6 hover:underline op-100!" href={firstLinkHref} external={true}>
          {
            collectionType === 'releases' && (
              <span>
                v{item.versionParts[0]}
                <span class={`github-${item.versionType}`}>{item.versionParts[1]}</span>
              </span>
            )
          }
          {collectionType === 'prs' && <span>#{item.number}</span>}
        </Link>
        <time class="text-sm op-60 lt-sm:text-3.2" datetime={time} title={time}>
          {formatDate(time, false)}
        </time>
      </div>
    </div>
  </summary>
  <div class="prose github-item-prose" set:html={content} />
</details>
